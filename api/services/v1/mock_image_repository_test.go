// Code generated by MockGen. DO NOT EDIT.
// Source: api/services/v1/imageRepository.go
//
// Generated by this command:
//
//	mockgen -source=api/services/v1/imageRepository.go -destination=api/services/v1/mock_image_repository_test.go
//

// Package mock_v1 is a generated GoMock package.
package v1

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/rakeranjan/image-service/api/models"
	gomock "go.uber.org/mock/gomock"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
	isgomock struct{}
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// DeleteImageMetaData mocks base method.
func (m *MockImageRepository) DeleteImageMetaData(ctx context.Context, data *models.ImageMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageMetaData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageMetaData indicates an expected call of DeleteImageMetaData.
func (mr *MockImageRepositoryMockRecorder) DeleteImageMetaData(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageMetaData", reflect.TypeOf((*MockImageRepository)(nil).DeleteImageMetaData), ctx, data)
}

// GetAllImageMetaData mocks base method.
func (m *MockImageRepository) GetAllImageMetaData(ctx context.Context, user *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImageMetaData", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImageMetaData indicates an expected call of GetAllImageMetaData.
func (mr *MockImageRepositoryMockRecorder) GetAllImageMetaData(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImageMetaData", reflect.TypeOf((*MockImageRepository)(nil).GetAllImageMetaData), ctx, user)
}

// GetImageMetaData mocks base method.
func (m *MockImageRepository) GetImageMetaData(ctx context.Context, user models.User, imageID string) (*models.ImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMetaData", ctx, user, imageID)
	ret0, _ := ret[0].(*models.ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMetaData indicates an expected call of GetImageMetaData.
func (mr *MockImageRepositoryMockRecorder) GetImageMetaData(ctx, user, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMetaData", reflect.TypeOf((*MockImageRepository)(nil).GetImageMetaData), ctx, user, imageID)
}

// GetImageMetaDataByImageID mocks base method.
func (m *MockImageRepository) GetImageMetaDataByImageID(ctx context.Context, user *models.User, imageID string) (*models.ImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMetaDataByImageID", ctx, user, imageID)
	ret0, _ := ret[0].(*models.ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMetaDataByImageID indicates an expected call of GetImageMetaDataByImageID.
func (mr *MockImageRepositoryMockRecorder) GetImageMetaDataByImageID(ctx, user, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMetaDataByImageID", reflect.TypeOf((*MockImageRepository)(nil).GetImageMetaDataByImageID), ctx, user, imageID)
}

// SaveImageMetaData mocks base method.
func (m *MockImageRepository) SaveImageMetaData(ctx context.Context, data *models.ImageMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImageMetaData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveImageMetaData indicates an expected call of SaveImageMetaData.
func (mr *MockImageRepositoryMockRecorder) SaveImageMetaData(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImageMetaData", reflect.TypeOf((*MockImageRepository)(nil).SaveImageMetaData), ctx, data)
}

// SendToSqsForProcessing mocks base method.
func (m *MockImageRepository) SendToSqsForProcessing(ctx context.Context, imageMetaData *models.ImageMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToSqsForProcessing", ctx, imageMetaData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToSqsForProcessing indicates an expected call of SendToSqsForProcessing.
func (mr *MockImageRepositoryMockRecorder) SendToSqsForProcessing(ctx, imageMetaData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToSqsForProcessing", reflect.TypeOf((*MockImageRepository)(nil).SendToSqsForProcessing), ctx, imageMetaData)
}

// UpdateImageMetaData mocks base method.
func (m *MockImageRepository) UpdateImageMetaData(ctx context.Context, data *models.ImageMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageMetaData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageMetaData indicates an expected call of UpdateImageMetaData.
func (mr *MockImageRepositoryMockRecorder) UpdateImageMetaData(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageMetaData", reflect.TypeOf((*MockImageRepository)(nil).UpdateImageMetaData), ctx, data)
}

// UploadToProcessing mocks base method.
func (m *MockImageRepository) UploadToProcessing(ctx context.Context, metaData *models.ImageMetaData, fileHeader *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToProcessing", ctx, metaData, fileHeader)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadToProcessing indicates an expected call of UploadToProcessing.
func (mr *MockImageRepositoryMockRecorder) UploadToProcessing(ctx, metaData, fileHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToProcessing", reflect.TypeOf((*MockImageRepository)(nil).UploadToProcessing), ctx, metaData, fileHeader)
}
